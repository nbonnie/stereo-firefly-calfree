% Auto-generated by cameraCalibrator app on 03-Mar-2025
%-------------------------------------------------------
% This is a Matlab script to calibrate camera intrinsic values
% Specifically this will calculate K and radial distortion
% Supply images, and set the size of a checkerboard square & units
% Calculated values will only be valid for a camera body + prime lens pair


% Define images to process
imageFileNames = {'/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/1.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/3.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/5.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/6.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/7.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/8.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/9.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/10.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/13.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/15.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/21.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/22.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/23.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/24.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/26.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/27.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/28.bmp',...
    '/Users/nbonnie/Desktop/Lab/Data/stereo_controlled_data/cal1/29.bmp',...
    };
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
minCornerMetric = 0.150000;
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames, 'MinCornerMetric', minCornerMetric);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 0.2159;  % in meters
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'meters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
